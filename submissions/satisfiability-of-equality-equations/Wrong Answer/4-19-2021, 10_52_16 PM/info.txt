{"id":482681703,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1618852936,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/482681703/","is_pending":"Not Pending","title":"Satisfiability of Equality Equations","memory":"N/A","code":"class Solution {\npublic:\n    void dfs(unordered_map<char, vector<char>>& graph, char start, unordered_map<char, int>& visited, int label) {\n        visited[start] = label;\n        \n        for (auto& nbr: graph[start]) {\n            if (visited.find(nbr) == visited.end())\n                dfs(graph, nbr, visited, label);\n        }\n    }\n    bool equationsPossible(vector<string>& equations) {\n        // Construct graph\n        unordered_map<char, vector<char>> graph;\n        unordered_map<char, int> visited;\n        \n        for (auto& eqn: equations) {\n            if (eqn[1] == '=' && eqn[2] == '=') {\n                graph[eqn[0]].push_back(eqn[3]);\n                graph[eqn[3]].push_back(eqn[0]);\n            }\n        }\n        \n        int label = 0;\n        \n        for (auto& node: graph) {\n            if (visited.find(node.first) == visited.end()) {\n                dfs(graph, node.first, visited, label);\n                label++;\n            }\n        }\n        \n        // Process inquality\n        for (auto& eqn: equations) {\n            if (eqn[1] == '!') {\n                if (visited.find(eqn[0]) != visited.end() &&\n                    visited.find(eqn[3]) != visited.end() && \n                    visited[eqn[0]] == visited[eqn[3]]) {\n                        return false;    \n                    }\n            }\n        }\n        \n        return true;\n        \n    }\n};","compare_result":"1111101111111000111111111001110111111111111111111101111111111111101101111111110111011011011111111111111111111111111111101111111111111111111111111111111111111111111111111111111111111","title_slug":"satisfiability-of-equality-equations"}