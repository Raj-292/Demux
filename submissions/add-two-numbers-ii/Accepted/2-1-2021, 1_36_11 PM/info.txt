{"id":450508437,"lang":"cpp","time":"4 months, 1 week","timestamp":1612166771,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/450508437/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"71.3 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n     ListNode* f(ListNode* li, ListNode* lj, int &carry)\n{\n    if(!li) {\n            carry = 0;\n            return NULL;\n        }\n       \n        // Get the sum and carry for the suffix lists\n        ListNode *summed_list = f(li->next, lj->next,carry);\n    \n    int sum = (li->val + lj->val + carry);\n    ListNode* temp = new ListNode(sum%10);\n    carry = sum/10;\n        \n    cout<<carry;\n    temp->next = summed_list;\n    return temp;\n}\n    \n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        ListNode* l1copy =  l1;\n        ListNode* l2copy =  l2;\n        ListNode* dummy =  new ListNode();\n        ListNode* path =   dummy;\n        int carry=0;\n        \n        while(l1copy!=NULL && l2copy!=NULL)\n        {\n            l1copy = l1copy->next;\n            l2copy = l2copy->next;\n        }\n        \n        if(l1copy!=NULL)\n        {\n            while(l1copy!=NULL)\n            {\n                ListNode* temp = new ListNode();\n                path->next = temp;\n                path = path->next;\n                path->next = NULL;\n                l1copy = l1copy->next;\n            }\n            path->next = l2;\n            dummy = dummy->next;\n            \n        ListNode *res = f(l1,dummy,carry);\n        ListNode *curr = res;\n        if(carry) {\n            curr = new ListNode(carry);\n            curr->next = res;\n        }\n        \n        return curr;\n        }\n        else if(l2copy!=NULL)\n        {\n           while(l2copy!=NULL)\n            {\n                ListNode* temp = new ListNode();\n                path->next = temp;\n                path = path->next;\n                path->next = NULL;\n                l2copy = l2copy->next;\n            }\n            path->next = l1;\n            dummy = dummy->next;\n            \n        ListNode *res = f(dummy,l2,carry);\n        ListNode *curr = res;\n        if(carry) {\n            curr = new ListNode(carry);\n            curr->next = res;\n        }\n        \n        return curr; \n        }\n        else\n        {\n        ListNode *res = f(l1,l2,carry);\n        ListNode *curr = res;\n        if(carry) {\n            curr = new ListNode(carry);\n            curr->next = res;\n        }\n        \n        return curr;\n        }\n    }\n};\n","compare_resulttitle_slug":"add-two-numbers-ii"}