{"id":450194229,"lang":"cpp","time":"4Â months, 1Â week","timestamp":1612112338,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/450194229/","is_pending":"Not Pending","title":"Add Two Numbers II","memory":"71.2 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* f(ListNode* l1, ListNode* l2, int &carry) {\n        if(!l1) {\n            carry = 0;\n            return NULL;\n        }\n        \n        // Get the sum and carry for the suffix lists\n        int passed_carry;\n        ListNode *summed_list = f(l1->next, l2->next, passed_carry);\n        \n        // Combining step\n        int curr_elt = (l1->val + l2->val + passed_carry)%10;\n        int curr_carry = (l1->val + l2->val + passed_carry)/10;\n        \n        ListNode *curr_node = new ListNode(curr_elt);\n        \n        curr_node->next = summed_list;\n        // Implicit return\n        carry = curr_carry;\n        \n        // Explicit return\n        return curr_node;\n    }\n    ListNode* addTwoNumbers(ListNode* l1, ListNode* l2) {\n        // Padding logic\n        ListNode *curr_l1 = l1, *curr_l2 = l2;\n        \n        while(curr_l1 && curr_l2) {\n            curr_l1 = curr_l1->next;\n            curr_l2 = curr_l2->next;\n        }\n        \n        ListNode dummy;\n        ListNode *new_l1, *new_l2, *pad_list = &dummy, *rem_list;\n        \n        if(curr_l1) {\n            rem_list = curr_l1;\n            new_l1 = l1;\n            pad_list->next = l2;\n        }\n        else {\n            rem_list = curr_l2;\n            new_l1 = l2;\n            pad_list->next = l1;\n        }\n        \n        while(rem_list) {\n            ListNode *temp = new ListNode(0);\n            temp->next = pad_list->next;\n            pad_list->next = temp;\n\n            rem_list = rem_list->next;\n        }\n        \n        // pad_list contains all 0s\n        // new_l1 points to the bigger list\n        // initialize new_l2\n        new_l2 = pad_list->next;\n        \n        \n        int carry;\n        ListNode *res = f(new_l1,new_l2,carry);\n        ListNode *curr = res;\n        if(carry) {\n            curr = new ListNode(carry);\n            curr->next = res;\n        }\n        \n        return curr;\n    }\n};","compare_resulttitle_slug":"add-two-numbers-ii"}