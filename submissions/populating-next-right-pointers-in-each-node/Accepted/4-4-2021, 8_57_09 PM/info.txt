{"id":476393898,"lang":"cpp","time":"2Â months","timestamp":1617550029,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/476393898/","is_pending":"Not Pending","title":"Populating Next Right Pointers in Each Node","memory":"16.8 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    Node* left;\n    Node* right;\n    Node* next;\n\n    Node() : val(0), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val) : val(_val), left(NULL), right(NULL), next(NULL) {}\n\n    Node(int _val, Node* _left, Node* _right, Node* _next)\n        : val(_val), left(_left), right(_right), next(_next) {}\n};\n*/\n\nclass Solution {\npublic:\n    Node* connect(Node* root) {\n        if (!root) return root;\n        \n        root->next = NULL;\n        Node* curr_level = root;\n        Node *curr_node = curr_level;\n        \n        while(curr_level) {\n            while(curr_node) {\n                if (curr_node->left) {\n                    curr_node->left->next = curr_node->right;\n                    if (curr_node->next)\n                        curr_node->right->next = curr_node->next->left;\n                    else\n                        curr_node->right->next = NULL;\n                }\n                curr_node = curr_node->next;\n            }\n            \n            curr_node = curr_level->left;\n            curr_level = curr_node;\n        }\n        \n        return root;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"populating-next-right-pointers-in-each-node"}