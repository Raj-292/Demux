{"id":484638281,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1619281429,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/484638281/","is_pending":"Not Pending","title":"Course Schedule","memory":"13.7 MB","code":"class Solution {\npublic:\n    bool containsCycle(vector<vector<int>>& graph, vector<bool>& visited, vector<bool>& curr_path, int i) {\n        \n        bool t = false;\n        for (auto& nbrs: graph[i]) {\n            if (curr_path[nbrs] == true)\n                t = true;\n            \n            if (!visited[nbrs]) {\n                curr_path[nbrs] = true;\n                visited[nbrs] = true;\n                t = t || containsCycle(graph, visited, curr_path, nbrs);\n                curr_path[nbrs] = false;\n            }   \n        }\n        \n        return t;\n    }\n    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {\n        // Construct the graph.\n        // Adjacency list.\n        vector<vector<int>> graph(numCourses);\n        \n        for (auto& pre: prerequisites) {\n            graph[pre[1]].push_back(pre[0]);\n        }\n        \n        // Find out if this graph contains a cycle.\n        vector<bool> visited(numCourses, false);\n        vector<bool> curr_path(numCourses, false);\n        bool t = false;\n        for (int i = 0; i < numCourses; i++) {\n            if (!visited[i]) {\n                visited[i] = curr_path[i] = true;\n                t = t || containsCycle(graph, visited, curr_path, i);\n                curr_path[i] = false;\n            }  \n        }\n        \n        return !t;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"course-schedule"}