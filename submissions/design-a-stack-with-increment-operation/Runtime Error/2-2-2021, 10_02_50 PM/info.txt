{"id":451091404,"lang":"cpp","time":"4Â months","timestamp":1612283570,"status_display":"Runtime Error","runtime":"N/A","url":"/submissions/detail/451091404/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"N/A","code":"class CustomStack {\npublic:\n    vector<int> original_val_;\n    vector<int> inc_val_;\n    int size_;\n    \n    CustomStack(int maxSize) {\n        size_ = maxSize;\n    }\n    \n    // O(1)\n    void push(int x) {\n        if(original_val_.size() == size_)\n            return;\n        \n        original_val_.push_back(x);\n        inc_val_.push_back(0);\n    }\n    \n    // O(1)\n    int pop() {\n        if(original_val_.empty())\n            return -1;\n        \n        int last = original_val_.back() + inc_val_.back();\n        \n        // Transfer to the previous\n        if(original_val_.size() > 1) {\n            inc_val_[inc_val_.size()-2] += inc_val_.back();\n        }\n        \n        // Remove\n        original_val_.pop_back();\n        inc_val_.pop_back();\n        \n        return last;\n    }\n    \n    // O(1)\n    void increment(int k, int val) {\n        int n = original_val_.size();\n        \n        inc_val_[min(n, k)-1] += val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */","compare_result":"1100000000000000000000000000000000","title_slug":"design-a-stack-with-increment-operation"}