{"id":451084145,"lang":"cpp","time":"4Â months","timestamp":1612282284,"status_display":"Accepted","runtime":"36 ms","url":"/submissions/detail/451084145/","is_pending":"Not Pending","title":"Design a Stack With Increment Operation","memory":"21 MB","code":"class CustomStack {\npublic:\n    vector<int> custom_stack_;\n    int size_;\n    \n    CustomStack(int maxSize) {\n        size_ = maxSize;\n    }\n    \n    // O(1)\n    void push(int x) {\n        if(custom_stack_.size() == size_)\n            return;\n        \n        custom_stack_.push_back(x);\n    }\n    \n    // O(1)\n    int pop() {\n        if(custom_stack_.empty())\n            return -1;\n        \n        int last = custom_stack_.back();\n        custom_stack_.pop_back();\n        \n        return last;\n    }\n    \n    // O(k)\n    void increment(int k, int val) {\n        int n = custom_stack_.size();\n        \n        for(int i = 0; i < min(k, n); i++)\n            custom_stack_[i] += val;\n    }\n};\n\n/**\n * Your CustomStack object will be instantiated and called as such:\n * CustomStack* obj = new CustomStack(maxSize);\n * obj->push(x);\n * int param_2 = obj->pop();\n * obj->increment(k,val);\n */","compare_result":"1111111111111111111111111111111111","title_slug":"design-a-stack-with-increment-operation"}