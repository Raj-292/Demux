{"id":473414081,"lang":"cpp","time":"2 months, 1 week","timestamp":1616929056,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/473414081/","is_pending":"Not Pending","title":"Validate Binary Search Tree","memory":"21.8 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // It returns whether the tree rooted at \"root\" is a valid bst.\n    // It also returns the largest and the smallest nodes of the tree\n    // rooted at \"root\".\n    bool isValidBSTHelper(TreeNode* root, long& min_elt, long& max_elt) {\n        // Base case\n        if (!root) {\n            min_elt = LONG_MAX;\n            max_elt = LONG_MIN;\n            return true;\n        }\n        \n        // Recursive step.\n        bool ans_l, ans_r;\n        long min_left, max_left, min_right, max_right;\n        \n        // Get for the left subtree\n        ans_l = isValidBSTHelper(root->left, min_left, max_left);\n        \n        // Get for the right subtree\n        ans_r = isValidBSTHelper(root->right, min_right, max_right);\n        \n        // combine\n        min_elt = min((long)root->val, min(min_left, min_right));\n        max_elt = max((long)root->val, max(max_left, max_right));\n        \n        return ans_l && ans_r && (root->val > max_left && root->val < min_right);\n    }\n    bool isValidBST(TreeNode* root) {\n        long min_elt = LONG_MAX, max_elt = LONG_MIN;\n        \n        return isValidBSTHelper(root, min_elt, max_elt);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"validate-binary-search-tree"}