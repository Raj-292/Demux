{"id":483084248,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1618935873,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/483084248/","is_pending":"Not Pending","title":"Surrounded Regions","memory":"10.5 MB","code":"class Solution {\npublic:\n    vector<vector<int>> nbrs = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n    void dfs(vector<vector<char>>& board, int i, int j, vector<vector<bool>>& visited) {\n        visited[i][j] = true;\n        \n        // neighbors.\n        for(auto& nbr: nbrs) {\n            int x = i + nbr[0];\n            int y = j + nbr[1];\n            \n            if (x < 0 || y < 0 || x >= board.size() \n               || y >= board[0].size() || visited[x][y] || board[x][y] == 'X')\n                continue;\n            \n            dfs(board, x, y, visited);\n        }\n        \n    }\n    void solve(vector<vector<char>>& board) {\n        int m = board.size(), n = board[0].size(), i, j;\n        vector<vector<bool>> visited(m, vector<bool>(n, false));\n        // top and bottom boundaries\n        for (i = 0; i < n; i++) {\n            if (!visited[0][i] && board[0][i] == 'O')\n                dfs(board, 0, i, visited);\n            \n            if (!visited[m-1][i] && board[m-1][i] == 'O')\n                dfs(board, m-1, i, visited);\n        }\n        \n        // left and right boundaries\n        for (i = 0; i < m; i++) {\n            if (!visited[i][0] && board[i][0] == 'O')\n                dfs(board, i, 0, visited);\n            \n            if (!visited[i][n-1] && board[i][n-1] == 'O')\n                dfs(board, i, n-1, visited);\n        }\n        \n        // Flip the relevant Os\n        for (i = 0; i < m; i++) {\n            for (j = 0; j < n; j++) {\n                if (board[i][j] == 'O' && !visited[i][j])\n                    board[i][j] = 'X';\n            }\n        }\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111","title_slug":"surrounded-regions"}