{"id":451109516,"lang":"cpp","time":"4Â months","timestamp":1612286702,"status_display":"Accepted","runtime":"276 ms","url":"/submissions/detail/451109516/","is_pending":"Not Pending","title":"Maximum Frequency Stack","memory":"86.5 MB","code":"class FreqStack {\npublic:\n    int max_freq;\n    unordered_map<int, int> counter;\n    unordered_map<int, stack<int>> rev_freq;\n    \n    FreqStack() {  \n    }\n    \n    void push(int x) {\n        // Increase the counter\n        counter[x]++;\n        \n        // Get the counter and push it in the stack\n        int count = counter[x];\n        \n        rev_freq[count].push(x);\n        \n        // Update the max_freq\n        max_freq = max(max_freq, count);\n    }\n    \n    int pop() {\n        // Remove the most frequent\n        int last = rev_freq[max_freq].top();\n        \n        rev_freq[max_freq].pop();\n        \n        // Update the count\n        counter[last]--;\n        \n        // Update the max_freq\n        if(rev_freq[max_freq].empty())\n            max_freq--;\n        \n        return last;\n    }\n};\n\n/**\n * Your FreqStack object will be instantiated and called as such:\n * FreqStack* obj = new FreqStack();\n * obj->push(x);\n * int param_2 = obj->pop();\n */","compare_result":"1111111111111111111111111111111111111","title_slug":"maximum-frequency-stack"}