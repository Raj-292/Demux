{"id":438482741,"lang":"cpp","time":"5Â months","timestamp":1609776624,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/438482741/","is_pending":"Not Pending","title":"Implement strStr()","memory":"7.3 MB","code":"class Solution {\npublic:\n    int strStr(string haystack, string needle) {\n        // LPS function\n        int n = needle.size(), i, j;\n        \n        if(n == 0) return 0;\n        \n        vector<int> lps(n, 0);\n        {\n            for(int i = 1; i < n; i++) {\n                j = lps[i-1];\n\n                while(j > 0 && needle[j] != needle[i]) {\n                    j = lps[j-1];\n                }\n\n                if(needle[j] == needle[i])\n                    lps[i] = j+1;\n                else\n                    lps[i] = 0;\n            }\n        }\n        \n        // Actual KMP\n        // I have the lps function\n        // lps[i] <-- longest proper prefix which is also a suffix for pattern[0..i]\n        i = 0, j = 0;\n        \n        while(i < haystack.size() && j < n) {\n            // Find first mismatch\n            if(haystack[i] == needle[j]) {\n                i++; j++;\n                continue;\n            }\n            \n            \n            // while(j < n && i < haystack.size() && haystack[i] == needle[j]) {\n            //     i++; j++;\n            // }\n            \n            // If pattern found\n            if(j == n)\n                return (i-n);\n            \n            // Pattern not found\n            // Update j\n            if(j == 0)\n                i++;\n            else\n                j = lps[j-1];\n        }\n        \n        if(j == n)\n            return (i-n);\n        \n        return -1;\n       \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"implement-strstr"}