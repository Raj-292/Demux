{"id":485926642,"lang":"cpp","time":"1 month, 1 week","timestamp":1619543281,"status_display":"Accepted","runtime":"108 ms","url":"/submissions/detail/485926642/","is_pending":"Not Pending","title":"Network Delay Time","memory":"41 MB","code":"class Solution {\npublic:\n    int networkDelayTime(vector<vector<int>>& times, int n, int k) {\n        // Construct the graph.\n        vector<vector<pair<int, int>>> graph(n+1);\n        vector<bool> visited(n+1, false);\n        int res = 0, count = 0;\n        \n        for (const auto& edge : times) {\n            graph[edge[0]].push_back({edge[2], edge[1]});\n        }\n        \n        // Weighted BFS.\n        // Declare a min Priority Queue.\n        priority_queue<pair<int, int>, vector<pair<int, int>>, /* Type of priority */ greater<pair<int, int>> > pq;\n        \n        pq.push({0, k});\n        \n        while(!pq.empty()) {\n            pair<int, int> t = pq.top();\n            pq.pop();\n            \n            if (visited[t.second])\n                continue;\n            \n            visited[t.second] = true;\n            count++;\n            // Shortest path from k to t.second.\n            \n            res = max(res, t.first);\n            \n            // Push all the nbrs\n            for (const auto& nbrs : graph[t.second]) {\n                if (!visited[nbrs.second]){\n                    pq.push({t.first+nbrs.first, nbrs.second});\n                }  \n            }\n        }\n        \n        return count == n? res: -1;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"network-delay-time"}