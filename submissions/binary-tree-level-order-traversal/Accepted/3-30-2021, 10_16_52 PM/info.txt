{"id":474344758,"lang":"cpp","time":"2 months, 1 week","timestamp":1617122812,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/474344758/","is_pending":"Not Pending","title":"Binary Tree Level Order Traversal","memory":"12.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    vector<vector<int>> levelOrder(TreeNode* root) {\n        queue<TreeNode *> q;\n        vector<vector<int>> res;\n        \n        if (!root) return res;\n        \n        q.push(root);\n        \n        while(!q.empty()) {\n            res.push_back(vector<int>());\n            int n = q.size();\n            for(int i = 0; i < n; i++) {\n                res[res.size()-1].push_back(q.front()->val);\n\n                // Push the left child if it exists to the next level\n                if (q.front()->left) \n                    q.push(q.front()->left);\n\n                // Push the right child if it exists to the next level\n                if (q.front()->right)\n                    q.push(q.front()->right);\n                \n                q.pop();\n            }\n        }\n        \n        return res;\n        \n    }\n};","compare_result":"1111111111111111111111111111111111","title_slug":"binary-tree-level-order-traversal"}