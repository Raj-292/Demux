{"id":453660590,"lang":"cpp","time":"4Â months","timestamp":1612800327,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/453660590/","is_pending":"Not Pending","title":"Largest Rectangle in Histogram","memory":"64 MB","code":"class Solution {\npublic:\n    int largestRectangleArea(vector<int>& heights) {\n        int n = heights.size(), i, width, area, res = INT_MIN;\n        vector<int> next_smaller(n);\n        \n        // Store index in the stack\n        stack<int> st;\n        \n        for(i = n-1; i >= 0; i--) {\n            while(!st.empty() && heights[st.top()] >= heights[i])\n                st.pop();\n            \n            if(st.empty())\n                next_smaller[i] = n;\n            else\n                next_smaller[i] = st.top();\n            \n            st.push(i);\n        }\n        \n        stack<int> st1;\n        \n        for(i = 0; i < n; i++) {\n            while(!st1.empty() && heights[st1.top()] >= heights[i])\n                st1.pop();\n            \n            if(st1.empty()) {\n                width = next_smaller[i];\n            }\n            else {\n                width = next_smaller[i] - st1.top() - 1;\n            }\n            \n            area = heights[i]*width;\n            \n            res = max(res, area);\n            \n            st1.push(i);\n            \n        }\n        \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"largest-rectangle-in-histogram"}