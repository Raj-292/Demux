{"id":469337596,"lang":"cpp","time":"2 months, 3 weeks","timestamp":1616058419,"status_display":"Accepted","runtime":"0 ms","url":"/submissions/detail/469337596/","is_pending":"Not Pending","title":"Implement Queue using Stacks","memory":"6.9 MB","code":"class MyQueue {\npublic:\n    /** Initialize your data structure here. */\n    stack<int> a;\n    stack<int> b;\n    MyQueue() {\n        \n    }\n    \n    /** Push element x to the back of queue. */\n    void push(int x) {\n        a.push(x);\n        return;\n    }\n    \n    /** Removes the element from in front of queue and returns that element. */\n    int pop() {\n        if(b.empty()){\n            while(!a.empty()){\n                b.push(a.top());\n                a.pop();\n            }\n        }\n        int t = b.top();\n        b.pop();\n        return t;\n    }\n    \n    /** Get the front element. */\n    int peek() {\n        if(b.empty()){\n            while(!a.empty()){\n                b.push(a.top());\n                a.pop();\n            }\n        }\n        int t = b.top();\n        return t;\n        \n    }\n    \n    /** Returns whether the queue is empty. */\n    bool empty() {\n        if(a.empty() && b.empty())\n            return true;\n        return false;\n    }\n};\n\n/**\n * Your MyQueue object will be instantiated and called as such:\n * MyQueue* obj = new MyQueue();\n * obj->push(x);\n * int param_2 = obj->pop();\n * int param_3 = obj->peek();\n * bool param_4 = obj->empty();\n */","compare_result":"11111111111111111111","title_slug":"implement-queue-using-stacks"}