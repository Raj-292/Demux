{"id":505022797,"lang":"cpp","time":"20 hours, 49 minutes","timestamp":1623173180,"status_display":"Accepted","runtime":"44 ms","url":"/submissions/detail/505022797/","is_pending":"Not Pending","title":"Balanced Binary Tree","memory":"21.9 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    // Returns true if the subtree is balanced. It also returns the height of the tree.\n    bool isBalancedHelper(TreeNode* root, int &height) {\n        // Base case\n        if (!root) {\n            height = 0;\n            return true;\n        }\n        \n        // Recursive step\n        bool ans_l, ans_r;\n        int height_l, height_r;\n        \n        // Get the height and the answer for the left subtree\n        ans_l = isBalancedHelper(root->left, height_l);\n        \n        // Get the height and the answer for the right subtree\n        ans_r = isBalancedHelper(root->right, height_r);\n        \n        // Compute\n        height = 1 + max(height_l, height_r);\n        \n        return ans_l && ans_r && abs(height_l-height_r) <= 1;\n    }\n    bool isBalanced(TreeNode* root) {\n        int height = 0;\n        bool ans = true;\n        ans = isBalancedHelper(root, height);\n        return ans;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"balanced-binary-tree"}