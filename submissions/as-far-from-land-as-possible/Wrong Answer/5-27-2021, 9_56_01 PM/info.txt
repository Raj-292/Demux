{"id":499064412,"lang":"cpp","time":"1 week, 5 days","timestamp":1622132761,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/499064412/","is_pending":"Not Pending","title":"As Far from Land as Possible","memory":"N/A","code":"class Solution {\npublic:\n    vector<vector<int>> directions = {{0,-1},{-1,0},{0,1},{1,0}};\n    int maxDistance(vector<vector<int>>& grid) {\n        queue<vector<int>> q;\n        int n = grid.size();\n        for(int i=0;i<n;i++)\n        {\n            for(int j=0;j<n;j++)\n            {\n                if(grid[i][j]==1)\n                    q.push({i,j,0});\n            }\n        }\n        vector<vector<int>> shortestPath(n,vector<int>(n,-1));\n        int res = -1;\n        int x,y;\n        while(!q.empty())\n        {\n            vector<int> curr = q.front();\n            q.pop();\n            if(shortestPath[curr[0]][curr[1]]==-1)\n            shortestPath[curr[0]][curr[1]] = curr[2];\n            if(grid[curr[0]][curr[1]]!=1)\n                res = max(res,curr[2]);\n            for(auto &element : directions)\n            {\n                x = curr[0] + element[0];\n                y = curr[1] + element[1];\n                if(x>=0 && x<n && y>=0 && y<n && shortestPath[x][y]==-1)\n                    q.push({x,y,1+curr[2]});\n            }\n        }\n        return res;\n    }\n};","compare_result":"11111000001010000000000000010000000","title_slug":"as-far-from-land-as-possible"}