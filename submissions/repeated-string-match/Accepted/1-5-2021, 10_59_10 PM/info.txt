{"id":438973385,"lang":"cpp","time":"5Â months","timestamp":1609867750,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/438973385/","is_pending":"Not Pending","title":"Repeated String Match","memory":"7.3 MB","code":"class Solution {\npublic:\n    int repeatedStringMatch(string a, string b) {\n        // Pattern is b\n        // Text is a\n        // Construct the lps for b\n        int nA = a.size(), nB = b.size(), i, j;\n        \n        vector<int> lps(nB, 0);\n        \n        lps[0] = 0;\n        for(i = 1; i < nB; i++) {\n            // Compute lps[i]\n            // Initialize to the biggest bubble probable\n            j = lps[i-1];\n            \n            while(j > 0 && b[j] != b[i])\n                j = lps[j-1];\n            \n            if(b[j] != b[i])\n                lps[i] = 0;\n            else\n                lps[i] = j+1;\n        }\n        \n        // Actual KMP\n        int total_len = nA*((nB/nA) + 2);\n        \n        i = 0, j = 0;\n        \n        while(i < total_len) {\n            // Find the first mismatch\n            while(j < nB && b[j] == a[i%nA]) {\n                i++; j++;\n            }\n            \n            // No mismatch\n            if(j == nB)\n                return ceil((float)i/nA);\n            \n            // Mismatch\n            if(j == 0)\n                i++;\n            else\n                j = lps[j-1];\n            \n        }\n        \n        return -1;\n        \n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111","title_slug":"repeated-string-match"}