{"id":487484943,"lang":"cpp","time":"1 month, 1 week","timestamp":1619885446,"status_display":"Accepted","runtime":"116 ms","url":"/submissions/detail/487484943/","is_pending":"Not Pending","title":"Find the City With the Smallest Number of Neighbors at a Threshold Distance","memory":"13 MB","code":"class Solution {\npublic:\n    int findTheCity(int n, vector<vector<int>>& edges, int distanceThreshold) {\n        vector<vector<pair<int, int>>> graph(n);\n        vector<vector<int>> dp(n, vector<int>(n, INT_MAX));\n        int i, j, k, count, res = INT_MAX, res_vertex;\n        \n        for (const auto& edge : edges) {\n            graph[edge[0]].push_back({edge[1], edge[2]});\n            graph[edge[1]].push_back({edge[0], edge[2]});\n            // Base case.\n            dp[edge[0]][edge[1]] = edge[2];\n            dp[edge[1]][edge[0]] = edge[2];\n        }\n        \n        // Base case.\n        for (int i = 0; i < n; i++)\n            dp[i][i] = 0;\n        \n        for (k = 0; k < n; k++) {\n            for (i = 0; i < n; i++) {\n                for (j = 0; j < n; j++) {\n                    if (dp[i][k] != INT_MAX && dp[k][j] != INT_MAX)\n                        dp[i][j] = min(dp[i][j], dp[i][k]+dp[k][j]);\n                }\n            }\n        }\n        \n        for (i = 0; i < n; i++) {\n            count = 0;\n            for (j = 0; j < n; j++) {\n                if (dp[i][j] <= distanceThreshold)\n                    count++;\n            }\n            \n            if (res >= count) {\n                res = count;\n                res_vertex = i;\n            }\n        }\n        \n        return res_vertex;\n        \n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111","title_slug":"find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance"}