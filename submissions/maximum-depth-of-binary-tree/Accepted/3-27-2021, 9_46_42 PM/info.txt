{"id":473071933,"lang":"cpp","time":"2 months, 1 week","timestamp":1616861802,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/473071933/","is_pending":"Not Pending","title":"Maximum Depth of Binary Tree","memory":"19 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode() : val(0), left(nullptr), right(nullptr) {}\n *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n * };\n */\nclass Solution {\npublic:\n    void maxDepthHelper(TreeNode* root, int contri, int& res) {\n        // Base case\n        if (!root) return;\n        \n        // Update the contri only at a leaf\n        if (!root->left && !root->right) {\n            res = max(res, 1+contri);\n            return;\n        }\n        \n        // Recursive step\n        maxDepthHelper(root->left, contri+1, res);\n        maxDepthHelper(root->right, contri+1, res);\n    }\n    int maxDepth(TreeNode* root) {\n        int res = 0;\n        \n        maxDepthHelper(root, 0, res);\n        \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"maximum-depth-of-binary-tree"}