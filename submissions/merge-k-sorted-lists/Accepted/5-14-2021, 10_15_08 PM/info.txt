{"id":493117577,"lang":"cpp","time":"3 weeks, 4 days","timestamp":1621010708,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/493117577/","is_pending":"Not Pending","title":"Merge k Sorted Lists","memory":"14 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    ListNode* mergeKLists(vector<ListNode*>& lists) {\n        // Push in minq and then pop \n        priority_queue<int,vector<int>,greater<int>> minq;\n        for(ListNode* list: lists){\n            ListNode* head = list;\n            while(head!=NULL){\n                minq.push(head->val);\n                head=head->next;\n            }\n        }\n        \n        // Recreate the sorted list\n        ListNode* root = NULL;\n        if(minq.size()==0) return root;\n        root = new ListNode(minq.top());\n        minq.pop();\n        ListNode* res = root;\n        while(minq.size()){\n            ListNode* temp = new ListNode(minq.top());\n            root->next = temp;\n            root = root->next;\n            minq.pop();\n        }\n        return res;\n        \n        \n        \n        // push one element at a time in minq fom all lists -> take the min -> push into the resultant list -> iterate one more element from the list list\n        // push the node ,  !value\n        // custom comparator -> derive the logic for min heap\n        \n        \n        \n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"merge-k-sorted-lists"}