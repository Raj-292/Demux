{"id":479533612,"lang":"cpp","time":"1 month, 4 weeks","timestamp":1618193447,"status_display":"Accepted","runtime":"164 ms","url":"/submissions/detail/479533612/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"544.5 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    void preorder_serialize(TreeNode* root, string& serial) {\n        if (!root) {\n            serial += \",n\";\n            return;\n        }\n        \n        serial = serial + \",\" + to_string(root->val);\n        \n        preorder_serialize(root->left, serial);\n        preorder_serialize(root->right, serial);\n    }\n    \n    TreeNode* preorder_deserialize(stringstream& ss) {\n        string val;\n        getline(ss, val, ',');\n        \n        if (val == \"n\") {\n            return NULL;\n        }\n    \n        TreeNode *node = new TreeNode(stoi(val));\n        \n        node->left = preorder_deserialize(ss);\n        node->right = preorder_deserialize(ss);\n        \n        return node;\n    }\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string serial = \"\";\n        \n        preorder_serialize(root, serial);\n        return serial.substr(1, (int)serial.size()-1);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        stringstream ss(data);\n        \n        return preorder_deserialize(ss);\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111111","title_slug":"serialize-and-deserialize-binary-tree"}