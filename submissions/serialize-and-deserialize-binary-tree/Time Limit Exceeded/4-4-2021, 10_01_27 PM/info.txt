{"id":476414786,"lang":"cpp","time":"2Â months","timestamp":1617553887,"status_display":"Time Limit Exceeded","runtime":"N/A","url":"/submissions/detail/476414786/","is_pending":"Not Pending","title":"Serialize and Deserialize Binary Tree","memory":"N/A","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Codec {\npublic:\n    void preorder_serialize(TreeNode* root, string& serial) {\n        if (!root) {\n            serial += \",null\";\n            return;\n        }\n        \n        serial = serial + \",\" + to_string(root->val);\n        \n        preorder_serialize(root->left, serial);\n        preorder_serialize(root->right, serial);\n    }\n    \n    TreeNode* preorder_deserialize(vector<string>& serial, int& idx) {\n        if (serial[idx] == \"null\") {\n            idx++;\n            return NULL;\n        }\n    \n        TreeNode *node = new TreeNode(stoi(serial[idx]));\n        idx++;\n        \n        node->left = preorder_deserialize(serial, idx);\n        node->right = preorder_deserialize(serial, idx);\n        \n        return node;\n    }\n    vector<string> split (const string &s, char delim) {\n        vector<string> result;\n        stringstream ss (s);\n        string item;\n\n        while (getline (ss, item, delim)) {\n            result.push_back (item);\n        }\n\n        return result;\n    }\n    // Encodes a tree to a single string.\n    string serialize(TreeNode* root) {\n        string serial = \"\";\n        \n        preorder_serialize(root, serial);\n        return serial.substr(1, (int)serial.size()-1);\n    }\n\n    // Decodes your encoded data to tree.\n    TreeNode* deserialize(string data) {\n        vector<string> serial = split(data, ',');\n        int idx = 0;\n        \n        TreeNode* root = preorder_deserialize(serial, idx);\n        \n        return root;\n    }\n};\n\n// Your Codec object will be instantiated and called as such:\n// Codec ser, deser;\n// TreeNode* ans = deser.deserialize(ser.serialize(root));","compare_result":"1111111111111111111111111111111111111111111111111000","title_slug":"serialize-and-deserialize-binary-tree"}