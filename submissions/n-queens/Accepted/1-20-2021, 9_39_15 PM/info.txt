{"id":445518504,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1611158955,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/445518504/","is_pending":"Not Pending","title":"N-Queens","memory":"7.2 MB","code":"class Solution {\npublic:\n    bool existsInCol(vector<string>& mat, int col, int n) {\n        for (int i = 0; i < n; i++) {\n            if(mat[i][col] == 'Q')\n                return true;\n        }\n        \n        return false;\n    }\n    \n    bool existsInDiag(vector<string>& mat, int curr_row, int curr_col, int type, int n) {\n        // type = 1 if Principal diagonal (positive slope)\n        // type = 2 if Secondary diagonal (negative slope)\n        // Go up\n        int factor = (type == 1)? 1: -1;\n        \n        int i = curr_row, j = curr_col;\n        while(i >= 0 && j < n && j >= 0) {\n            if(mat[i][j] == 'Q')\n                return true;\n            i--;\n            j += factor;\n        }\n        \n        return false;\n    }\n    void f(vector<string> &mat, int rem, vector<string>& contri, vector<vector<string>>& res, int n) {\n        // Base step\n        if(rem == 0) {\n            res.push_back(contri);\n            return;\n        }\n        \n        // Recursive step\n        // C1 to CN\n        // Try n-rem row\n        int i;\n        for(i = 0; i < n; i++) {\n            // Check if this is a valid position\n            // Check if possible in the current col\n            if(!existsInCol(mat, i, n) &&\n              !existsInDiag(mat, n-rem, i, 1, n) &&\n              !existsInDiag(mat, n-rem, i, 2, n)) {\n                mat[n-rem][i] = 'Q';\n                contri[n-rem][i] = 'Q';\n                f(mat, rem-1, contri, res, n);\n                mat[n-rem][i] = '.';\n                contri[n-rem][i] = '.';\n            }\n        }\n    }\n    vector<vector<string>> solveNQueens(int n) {\n        vector<vector<string>> res;\n        vector<string> mat(n, string(n, '.'));\n        vector<string> contri(n, string(n, '.'));\n        \n        f(mat, n, contri, res, n);\n        \n        return res;\n    }\n};","compare_result":"111111111","title_slug":"n-queens"}