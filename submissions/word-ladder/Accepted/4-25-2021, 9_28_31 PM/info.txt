{"id":485059808,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1619366311,"status_display":"Accepted","runtime":"128 ms","url":"/submissions/detail/485059808/","is_pending":"Not Pending","title":"Word Ladder","memory":"15.4 MB","code":"class Solution {\npublic:\n    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {\n        unordered_set<string> dict(wordList.begin(), wordList.end());\n        \n        queue<pair<string, int>> q;\n        unordered_set<string> visited;\n        \n        // Initialize with the beginWord\n        q.push({beginWord, 1});\n        visited.insert(beginWord);\n        \n        // Start a level-order traversal.\n        while(!q.empty()) {\n            pair<string, int> t = q.front();\n            q.pop();\n            \n            if (t.first == endWord) {\n                return t.second;\n            }\n            \n            // Go through the neighbours, mark them visited and push them in the queue.\n            string word = t.first;\n            int dist = t.second;\n            for (int i = 0; i < word.size(); i++) {\n                for (int j = 0; j < 26; j++) {\n                    word[i] = (j + 'a');\n                    \n                    if (dict.find(word) != dict.end() && visited.find(word) == visited.end()) {\n                        visited.insert(word);\n                        q.push({word, dist+1});\n                    }\n                    \n                    word[i] = (t.first)[i];\n                }\n            }\n        }\n        \n        return 0;\n    }\n};","compare_result":"1111111111111111111111111111111111111111111111111","title_slug":"word-ladder"}