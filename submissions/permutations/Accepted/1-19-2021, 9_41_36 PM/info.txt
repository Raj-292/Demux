{"id":445083609,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1611072696,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/445083609/","is_pending":"Not Pending","title":"Permutations","memory":"7.5 MB","code":"class Solution {\npublic:\n    void f(vector<int>& nums, vector<bool>& visited, vector<int>& contri, vector<vector<int>>& res) {\n        // Base step\n        // When everything is visited\n        if(contri.size() == nums.size()) {\n            res.push_back(contri);\n            return;\n        }\n        \n        // Recursive step\n        // Iterate over all possibilities for the current position\n        int i;\n        for(i = 0; i < nums.size(); i++) {\n            // Consider the ones that aren't visited\n            if(!visited[i]) {\n                // Pass down this contribution\n                // Try for this elt at the current position\n                contri.push_back(nums[i]);\n                visited[i] = true;\n                f(nums, visited, contri, res);\n                // Undo\n                contri.pop_back();\n                visited[i] = false;\n            }\n        }\n    }\n    vector<vector<int>> permute(vector<int>& nums) {\n        vector<bool> visited(nums.size(), false);\n        vector<vector<int>> res;\n        vector<int> contri;\n        \n        f(nums, visited, contri, res);\n        \n        return res;\n        \n    }\n};","compare_result":"1111111111111111111111111","title_slug":"permutations"}