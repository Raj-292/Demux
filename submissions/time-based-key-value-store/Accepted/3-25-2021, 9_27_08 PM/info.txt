{"id":472330183,"lang":"cpp","time":"2 months, 2 weeks","timestamp":1616687828,"status_display":"Accepted","runtime":"240 ms","url":"/submissions/detail/472330183/","is_pending":"Not Pending","title":"Time Based Key-Value Store","memory":"128 MB","code":"class TimeMap {\npublic:\n    /** Initialize your data structure here. */\n    unordered_map<string, vector<pair<int, string>>> u;\n    TimeMap() {\n        \n    }\n    \n    void set(string key, string value, int timestamp) {\n        u[key].push_back(make_pair(timestamp, value));\n    }\n    \n    string get(string key, int timestamp) {\n        // Binary Search on v for the largest <= timestamp\n        vector<pair<int, string>>& v = u[key];\n        \n        // FF*TTT*\n        // p(x): x > timestamp\n        // last F\n        int lo = 0, hi = v.size()-1, mid;\n        while(lo < hi) {\n            mid = lo + (hi-lo+1)/2;\n            \n            if (v[mid].first > timestamp)\n                hi = mid-1;\n            else\n                lo = mid;\n        }\n        \n        // answer is v[lo].second\n        // Sanity check?\n        if (v[lo].first <= timestamp)\n            return v[lo].second;\n        \n        return \"\";\n    }\n};\n\n/**\n * Your TimeMap object will be instantiated and called as such:\n * TimeMap* obj = new TimeMap();\n * obj->set(key,value,timestamp);\n * string param_2 = obj->get(key,timestamp);\n */","compare_result":"111111111111111111111111111111111111111111111","title_slug":"time-based-key-value-store"}