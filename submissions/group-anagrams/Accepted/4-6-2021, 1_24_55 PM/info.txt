{"id":477163503,"lang":"cpp","time":"2Â months","timestamp":1617695695,"status_display":"Accepted","runtime":"228 ms","url":"/submissions/detail/477163503/","is_pending":"Not Pending","title":"Group Anagrams","memory":"75.2 MB","code":"class Solution {\npublic:\n    string getGroupId(string& s) {\n        vector<int> freq(26, 0);\n        \n        for(const auto& ch : s) {\n            freq[ch-'a']++;\n        }\n        \n        string res = \"\";\n        for(const auto& num : freq) {\n            res = res + to_string(num) + \"#\";\n        }\n        \n        return res;\n    }\n    vector<vector<string>> groupAnagrams(vector<string>& strs) {\n        // Define history\n        vector<vector<string>> res;\n        unordered_map<string, int> history;\n        \n        for (auto& ana : strs) {\n            // Get the group id\n            string g_id = getGroupId(ana);\n            \n            // Don't find anything in the map. This is the\n            // first element of the group that is being inserted.\n            if (history.find(g_id) == history.end()) {\n                res.push_back({});\n                history[g_id] = (int)res.size()-1;\n            }\n            \n            res[history[g_id]].push_back(ana);\n        }\n        \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"group-anagrams"}