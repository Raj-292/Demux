{"id":464139672,"lang":"python3","time":"3Â months","timestamp":1615014631,"status_display":"Accepted","runtime":"32 ms","url":"/submissions/detail/464139672/","is_pending":"Not Pending","title":"Fraction to Recurring Decimal","memory":"14.4 MB","code":"class Solution:\n    def fractionToDecimal(self, numerator: int, denominator: int) -> str:\n        \n        def populateAfterDecimal(num,den,res):\n            # Key: Remainder\n            # Value: Index in res where the remainder occured for the first time\n            m={}\n            ans = \"\"\n            while(num):\n                # If num is not found in the map\n                if num not in m: \n                    m[num] = len(res)-1\n                    q = num//den\n                    r = num%den\n                    res += str(q)\n                    num = r*10\n                else: \n                    ans = res[0:m[num]+1] + \"(\" + res[m[num]+1:] + \")\"\n                    res = ans\n                    return res \n            return res\n        \n        if numerator == 0:\n            return \"0\"\n        \n        res = \"\"\n        \n        # Negative result\n        if (numerator < 0 and denominator > 0) or (numerator > 0 and denominator < 0):\n            res += \"-\"\n        \n        num = abs(numerator)\n        den = abs(denominator)\n        \n        #Before the decimal\n        q = num//den\n        rem = num%den\n        \n        res += str(q)\n        \n        # Decimal\n        if(rem == 0):\n            return res\n        \n        res += \".\"\n        \n        # After the decimal\n        res=populateAfterDecimal(rem*10, den, res)\n        \n        return res\n        ","compare_result":"11111111111111111111111111111111111111","title_slug":"fraction-to-recurring-decimal"}