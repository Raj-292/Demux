{"id":488368374,"lang":"cpp","time":"1Â month","timestamp":1620059470,"status_display":"Accepted","runtime":"168 ms","url":"/submissions/detail/488368374/","is_pending":"Not Pending","title":"Number of Operations to Make Network Connected","memory":"37.3 MB","code":"class DisjointSet {\npublic:\n    DisjointSet(int len) {\n        parent.resize(len);\n        for (int i = 0; i < len; i++)\n            parent[i] = i;\n        \n        num_components = len;\n    }\n    \n    void union_(int x, int y) {\n        int r_x = find_(x);\n        int r_y = find_(y);\n        \n        parent[r_x] = r_y;\n        num_components--;\n    }\n    \n    int find_(int x) {\n        while(x != parent[x])\n            x = parent[x];\n        \n        return x;\n    }\n    \n    int getNumComponents() {\n        return num_components;\n    }\n\nprivate:\n    vector<int> parent;\n    int num_components;\n};\n\nclass Solution {\npublic:\n    int makeConnected(int n, vector<vector<int>>& connections) {\n        \n        DisjointSet ds(n);\n        int extra_edge_count = 0;\n        \n        // Keep adding edges.\n        for (int i = 0; i < connections.size(); i++) {\n            int x = connections[i][0];\n            int y = connections[i][1];\n            \n            // Extra edge?\n            if (ds.find_(x) == ds.find_(y))\n                extra_edge_count++;\n            else\n                // Connect.\n                ds.union_(x, y);\n        }\n        \n        int num_components = ds.getNumComponents();\n        \n        if (num_components-1 > extra_edge_count)\n            return -1;\n        \n        return num_components-1;\n    }\n};","compare_result":"111111111111111111111111111111111111","title_slug":"number-of-operations-to-make-network-connected"}