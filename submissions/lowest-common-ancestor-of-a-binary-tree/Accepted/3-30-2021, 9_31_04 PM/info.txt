{"id":474329570,"lang":"cpp","time":"2 months, 1 week","timestamp":1617120064,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/474329570/","is_pending":"Not Pending","title":"Lowest Common Ancestor of a Binary Tree","memory":"14.1 MB","code":"/**\n * Definition for a binary tree node.\n * struct TreeNode {\n *     int val;\n *     TreeNode *left;\n *     TreeNode *right;\n *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n * };\n */\nclass Solution {\npublic:\n    // This function populates the lowest common ancestor of p and q in res if it exists (null otherwise).\n    // It also returns a true if either p or q is present in the subtree rooted at \"root\".\n    bool lowestCommonAncestorHelper(TreeNode* root, TreeNode* p, TreeNode* q, TreeNode** res) {\n        if (!root)\n            return false;\n        \n        bool l1 = lowestCommonAncestorHelper(root->left, p, q, res);\n        bool l2 = lowestCommonAncestorHelper(root->right, p, q, res);\n        \n        if ((l1 && l2) || ((root == p || root == q) && (l1 || l2)))\n            (*res) = root;\n        \n        return (l1 || l2 || root == p || root == q);\n    }\n    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {\n        TreeNode* res = NULL;\n        \n        bool l = lowestCommonAncestorHelper(root, p, q, &res);\n        \n        return res;\n    }\n};","compare_result":"1111111111111111111111111111111","title_slug":"lowest-common-ancestor-of-a-binary-tree"}