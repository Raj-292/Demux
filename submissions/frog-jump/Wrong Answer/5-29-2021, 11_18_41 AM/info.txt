{"id":499713844,"lang":"cpp","time":"1 week, 4 days","timestamp":1622267321,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/499713844/","is_pending":"Not Pending","title":"Frog Jump","memory":"N/A","code":"class Solution {\npublic:\n    int f(int i, int j, int n, vector<vector<int>> &dp, unordered_map<int,int>&m, vector<int> &stones){\n        if(i == n-1){\n            return 1;\n        }\n        \n        if(dp[i][j]!=-1)\n            return dp[i][j];\n        else{\n            bool temp = false;\n            if(j>1 && m.find(stones[i]+j-1)!=m.end()){\n                temp = temp||f(m[stones[i]+j-1],j-1,n,dp,m,stones);\n            }\n            if(m.find(stones[i]+j)!=m.end()){\n                temp = temp||f(m[stones[i]+j],j,n,dp,m,stones);\n            }\n            if(m.find(stones[i]+j+1)!=m.end()){\n                temp = temp||f(m[stones[i]+j+1],j+1,n,dp,m,stones);\n            }\n            dp[i][j] = (int)temp;\n        }\n        \n        return dp[i][j];\n    }\n    bool canCross(vector<int>& stones) {\n        int n=stones.size();\n        \n        vector<vector<int>> dp(n, vector<int>(n+1,-1));\n        unordered_map<int,int> m;\n        for(int i=0;i<n;i++){\n            m[stones[i]]=i;\n            dp[n-1][i+1] = 1;\n        }\n        \n        return f(1,1,n,dp,m,stones);\n    }\n};","compare_result":"11110111111011111111111111111111111111111111101111","title_slug":"frog-jump"}