{"id":482257068,"lang":"cpp","time":"1 month, 3 weeks","timestamp":1618766998,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/482257068/","is_pending":"Not Pending","title":"Frog Jump","memory":"213.2 MB","code":"class Solution {\npublic:\n    int canCrossHelper(unordered_map<int, int>& m, vector<vector<int>>& dp, int i, int j, vector<int>& stones) {\n        // Base case.\n        int n = stones.size();\n        if (i == n-1)\n            return 1;\n        \n        // DP step.\n        if (dp[i][j] != -1) return dp[i][j];\n        \n        // Recursive step\n        int t1 = 0, t2 = 0, t3 = 0;\n        if (j > 1 && m.find(stones[i]+j-1) != m.end())\n            t1 = canCrossHelper(m, dp, m[stones[i]+j-1], j-1, stones);\n                \n        // j\n        if(m.find(stones[i]+j) != m.end())\n            t2 = canCrossHelper(m, dp, m[stones[i]+j], j, stones);\n\n        // j+1\n        if (m.find(stones[i]+j+1) != m.end())\n            t3 = canCrossHelper(m, dp, m[stones[i]+j+1], j+1, stones);\n        \n        dp[i][j] = t1 || t2 || t3;\n        \n        return dp[i][j];\n    }\n    bool canCross(vector<int>& stones) {\n        if(stones[1] != 1)\n            return false;\n        \n        int n = stones.size();\n        unordered_map<int, int> m;\n        vector<vector<int>> dp(n, vector<int>(n+1, -1));\n        \n        // Populate the map and the base case\n        for(int i = 0; i < n; i++){\n            m[stones[i]] = i;\n        }\n            \n        // DP table\n        return (bool)canCrossHelper(m, dp, 1, 1, stones);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111","title_slug":"frog-jump"}