{"id":435712972,"lang":"cpp","time":"5 months, 1 week","timestamp":1609193342,"status_display":"Accepted","runtime":"4 ms","url":"/submissions/detail/435712972/","is_pending":"Not Pending","title":"Find in Mountain Array","memory":"7.4 MB","code":"/**\n * // This is the MountainArray's API interface.\n * // You should not implement it, or speculate about its implementation\n * class MountainArray {\n *   public:\n *     int get(int index);\n *     int length();\n * };\n */\nclass Solution {\npublic:\n    int binarySearch2(MountainArray &mountainArr, int target, int lo, int hi){\n        \n        int mid;\n        while(lo < hi){\n            mid = lo + (hi-lo)/2;\n                \n            if(mountainArr.get(mid) <= target)\n                hi = mid;\n            else\n                lo = mid+1;\n        }\n        \n        if(mountainArr.get(lo) == target) return lo;\n        return -1;\n        \n        \n    }\n    int binarySearch(MountainArray &mountainArr, int target, int lo, int hi){\n        \n        int mid;\n        while(lo < hi){\n            mid = lo + (hi-lo)/2;\n                \n            if(mountainArr.get(mid) >= target)\n                hi = mid;\n            else\n                lo = mid+1;\n        }\n        \n        if(mountainArr.get(lo) == target) return lo;\n        return -1;\n        \n        \n    }\n    int findInMountainArray(int target, MountainArray &mountainArr) {\n        // First get the peak element\n        int n = mountainArr.length(), lo, hi, mid, minIdx;\n        \n        if(mountainArr.get(0) == target) return 0;\n        \n        lo = 0, hi = n-1;\n        while(lo < hi){\n            mid = lo + (hi-lo)/2;\n                \n            if(mountainArr.get(mid) > mountainArr.get(mid+1))\n                hi = mid;\n            else\n                lo = mid+1;\n        }\n        \n        minIdx = lo;\n        \n        // cout << minIdx << endl;\n        \n        // Now search for the target\n        if(mountainArr.get(minIdx) < target) return -1;\n        \n        if(mountainArr.get(minIdx) == target) return minIdx;\n        \n        int idx = binarySearch(mountainArr, target, 0, minIdx);\n        \n        // cout << idx << endl;\n        \n        if(idx != -1) return idx;\n        \n        return binarySearch2(mountainArr, target, minIdx+1, n-1);\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111111111111111111111","title_slug":"find-in-mountain-array"}