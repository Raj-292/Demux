{"id":496805816,"lang":"cpp","time":"2 weeks, 3 days","timestamp":1621715639,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/496805816/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"11.2 MB","code":"class Solution {\npublic:\n    int binarytree(vector<int> & prefix_sum,int target)\n    {\n        int n=prefix_sum.size();\n        int lo=0,hi=n-1,mid;\n        while(lo<hi)\n        {\n            mid=lo+(hi-lo+1)/2;\n            if(prefix_sum[mid]>target)\n            {\n                hi=mid-1;\n            }\n            else\n            {\n                lo=mid;\n            }\n        }\n        if(prefix_sum[lo]<=target)\n        {\n            return lo;\n        }\n        return -1;\n    }\n    int minSubArrayLen(int target, vector<int>& nums) \n    {\n        vector<int> prefix_sum;\n         prefix_sum.push_back(0);\n        int cum_sum=0, window_length, res = INT_MAX;\n        int n=nums.size();\n        for(int i=0;i<n;i++)\n        {\n            cum_sum+=nums[i];\n            prefix_sum.push_back(cum_sum);\n            \n            int idx=binarytree(prefix_sum,cum_sum-target);\n            \n            if (idx==-1)\n            {\n                continue;\n            }\n            else\n            {\n                window_length = i-idx+1;\n                res = min(res, window_length);\n            }\n            \n        }\n                return res==INT_MAX? 0: res;\n    }\n};","compare_result":"1111111111111111111","title_slug":"minimum-size-subarray-sum"}