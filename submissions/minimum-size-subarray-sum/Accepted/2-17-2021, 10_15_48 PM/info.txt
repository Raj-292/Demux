{"id":457233060,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1613580348,"status_display":"Accepted","runtime":"24 ms","url":"/submissions/detail/457233060/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"13.4 MB","code":"class Solution {\npublic:\n    int minSubArrayLen(int target, vector<int>& nums) {\n        int n = nums.size(), i, cum_sum = 0, window_length, res = INT_MAX;\n        // Key is the prefix sum\n        // Value is the index\n        map<int, int> m;\n        \n        // Empty prefix\n        m[0] = -1;\n        \n        for(i = 0; i < n; i++) {\n            cum_sum += nums[i];\n            \n            // Largest history with prefix sum <= cum_sum-target\n            // UB-1\n            // UB\n            auto it = m.upper_bound(cum_sum-target);\n            \n            // UB-1\n            if(it == m.begin()){\n                m[cum_sum] = i;\n                continue;\n            }\n            else{\n                --it;\n                window_length = i-it->second;\n                res = min(res, window_length);\n            }\n            \n            m[cum_sum] = i;\n        }\n        \n        return res==INT_MAX? 0: res;\n    }\n};","compare_result":"1111111111111111111","title_slug":"minimum-size-subarray-sum"}