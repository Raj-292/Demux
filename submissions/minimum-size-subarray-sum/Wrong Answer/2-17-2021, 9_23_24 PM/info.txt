{"id":457216835,"lang":"cpp","time":"3 months, 3 weeks","timestamp":1613577204,"status_display":"Wrong Answer","runtime":"N/A","url":"/submissions/detail/457216835/","is_pending":"Not Pending","title":"Minimum Size Subarray Sum","memory":"N/A","code":"class Solution {\npublic:\n    int getLargestLessEquals(vector<int> &ar, int target) {\n        int n = ar.size(), lo, mid, hi;\n        \n        lo = 0, hi = n-1;\n        // F*T*\n        // p(x): arr(x) > target\n        // last F\n        while(lo < hi) {\n            mid = lo + (hi-lo+1)/2;\n            \n            if(ar[mid] > target)\n                hi = mid-1;\n            else\n                lo = mid;\n        }\n        \n        // Sanity check\n        if(ar[lo] <= target)\n            return lo;\n        return -1;\n    }\n    int minSubArrayLen(int target, vector<int>& nums) {\n        vector<int> prefix_sum;\n        int cum_sum = 0, window_length, res = INT_MAX;\n        \n        for(int i = 0; i < nums.size(); i++) {\n            // Ending at i, let's find out the largest prefix sum <= cum_sum-target\n            cum_sum += nums[i];\n            prefix_sum.push_back(cum_sum);\n            \n            // Binary Search\n            int idx = getLargestLessEquals(prefix_sum, cum_sum-target);\n            \n            // Everything is greater than cum_sum-target\n            if(idx == -1)\n                continue;\n            else {\n                window_length = i-idx;\n                res = min(res, window_length);\n            }\n        }\n        \n        return res==INT_MAX? 0: res;\n    }\n};","compare_result":"1111011111010011111","title_slug":"minimum-size-subarray-sum"}