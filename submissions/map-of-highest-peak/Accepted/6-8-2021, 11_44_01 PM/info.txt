{"id":505043956,"lang":"cpp","time":"20 hours, 2 minutes","timestamp":1623176041,"status_display":"Accepted","runtime":"592 ms","url":"/submissions/detail/505043956/","is_pending":"Not Pending","title":"Map of Highest Peak","memory":"108.3 MB","code":"class Solution {\npublic:\n    vector<vector<int>> offset = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {\n        int m = isWater.size();\n        int n = isWater[0].size();\n        vector<vector<int>> res(m, vector<int>(n,-1));\n        queue<pair<int,int>> q;\n        for(int i=0;i<m;i++){\n            for(int j=0;j<n;j++){\n                if(isWater[i][j]){ \n                    q.push({i,j});\n                    res[i][j]=0;\n                }\n            }\n        }\n        while(!q.empty()){\n            pair<int,int> p = q.front();\n            q.pop();\n            for (auto& entry : offset) {\n                int x = p.first + entry[0];\n                int y = p.second + entry[1];\n                \n                if (x < 0 || y < 0 || x >= m || y >= n|| res[x][y]!=-1)\n                    continue;\n\n                res[x][y] = res[p.first][p.second] + 1;\n                q.push({x, y});\n            }\n        }\n        \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111111111111111111111111111111","title_slug":"map-of-highest-peak"}