{"id":487504485,"lang":"cpp","time":"1 month, 1 week","timestamp":1619888696,"status_display":"Accepted","runtime":"488 ms","url":"/submissions/detail/487504485/","is_pending":"Not Pending","title":"Critical Connections in a Network","memory":"164.9 MB","code":"class Solution {\npublic:\n    int dfs (vector<vector<int>>& graph, int i, vector<int>& rank, vector<vector<int>>& res, int prev_rank, int n) {\n        rank[i] = prev_rank + 1;\n        int t = INT_MAX;\n        \n        for (const auto& nbr : graph[i]) {\n            if (rank[nbr] == -1) {\n                int k = dfs(graph, nbr, rank, res, prev_rank+1, n);\n                if (k > rank[i])\n                    res.push_back({i, nbr});\n                t = min(t, k);\n            }\n            else if (rank[nbr] == n+1)\n                continue;\n            else if (rank[nbr] != prev_rank)\n                t = min(t, rank[nbr]);\n        }\n        \n        rank[i] = n + 1;\n        return t;\n    }\n    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {\n        // Construct the graph.\n        vector<vector<int>> graph(n);\n        \n        for (const auto& edge : connections) {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n        \n        // Tarzan's Algorithm.\n        vector<vector<int>> res;\n        vector<int> rank(n, -1);\n        \n        int k = dfs(graph, 0, rank, res, 0, n);\n        \n        return res;\n    }\n};","compare_result":"111111111111111","title_slug":"critical-connections-in-a-network"}