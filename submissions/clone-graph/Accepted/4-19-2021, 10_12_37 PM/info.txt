{"id":482668585,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1618850557,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/482668585/","is_pending":"Not Pending","title":"Clone Graph","memory":"9 MB","code":"/*\n// Definition for a Node.\nclass Node {\npublic:\n    int val;\n    vector<Node*> neighbors;\n    Node() {\n        val = 0;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val) {\n        val = _val;\n        neighbors = vector<Node*>();\n    }\n    Node(int _val, vector<Node*> _neighbors) {\n        val = _val;\n        neighbors = _neighbors;\n    }\n};\n*/\n\nclass Solution {\npublic:\n    void dfs(Node* start, unordered_map<Node*, Node*>& m) {\n        Node* new_node = new Node(start->val);\n        m[start] = new_node;\n        \n        // Visit all the neighbors.\n        for (auto& nbr: start->neighbors) {\n            if (m.find(nbr) != m.end())\n                new_node->neighbors.push_back(m[nbr]);\n            else {\n                dfs(nbr, m);\n                new_node->neighbors.push_back(m[nbr]);\n            }\n        }\n    }\n    Node* cloneGraph(Node* node) {\n        if (!node) return NULL;\n        \n        unordered_map<Node*, Node*> m;\n        \n        dfs(node, m);\n        \n        return m[node];\n    }\n};","compare_result":"1111111111111111111111","title_slug":"clone-graph"}