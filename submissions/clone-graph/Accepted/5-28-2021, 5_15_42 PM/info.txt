{"id":499408742,"lang":"python3","time":"1 week, 5 days","timestamp":1622202342,"status_display":"Accepted","runtime":"40 ms","url":"/submissions/detail/499408742/","is_pending":"Not Pending","title":"Clone Graph","memory":"14.5 MB","code":"\"\"\"\n# Definition for a Node.\nclass Node:\n    def __init__(self, val = 0, neighbors = None):\n        self.val = val\n        self.neighbors = neighbors if neighbors is not None else []\n\"\"\"\n\nclass Solution:\n    def cloneGraph(self, node: 'Node') -> 'Node':\n        if not node:\n            return node\n        # Clone a graph \n        q1 = deque()\n        q2 = deque()\n        root = Node(node.val)\n        q1.append(root)  # cloned\n        q2.append(node)  # main\n        visited = {}\n        visited[node.val] = root\n        while len(q1):\n            middle2 = q2.popleft()\n            middle1 = q1.popleft()\n            print(middle1.val)\n            print(middle2.val)\n            for nbr in middle2.neighbors:\n                if not nbr.val in visited:\n                    child = Node(nbr.val)\n                    visited[nbr.val] = child\n                    q1.append(child)\n                    q2.append(nbr)\n                middle1.neighbors.append(visited[nbr.val])\n                # child.neighbors.append(middle1)\n        return root\n        ","compare_result":"1111111111111111111111","title_slug":"clone-graph"}