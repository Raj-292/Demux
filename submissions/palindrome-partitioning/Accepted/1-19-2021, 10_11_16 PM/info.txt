{"id":445092413,"lang":"cpp","time":"4 months, 2 weeks","timestamp":1611074476,"status_display":"Accepted","runtime":"96 ms","url":"/submissions/detail/445092413/","is_pending":"Not Pending","title":"Palindrome Partitioning","memory":"49.3 MB","code":"class Solution {\npublic:\n    bool isPalindrome(string& s) {\n        int start = 0, end = s.size()-1;\n        \n        while(start <= end) {\n            if(s[start] != s[end])\n                return false;\n            start++; end--;\n        }\n        \n        return true;\n    }\n    void f(string& s, int start, vector<string>& contri, vector<vector<string>>& res) {\n        // Base case\n        if(start == s.size()) {\n            res.push_back(contri);\n            return;\n        }\n        \n        // Try all possibilities of putting a partition\n        string part;\n        for(int j = start; j < s.size(); j++) {\n            // s[start...j] is the first partition\n            part = s.substr(start, j-start+1);\n            \n            if(!isPalindrome(part))\n                continue;\n            \n            contri.push_back(part);\n            f(s, j+1, contri, res);\n            contri.pop_back();\n        }\n    }\n    vector<vector<string>> partition(string s) {\n        vector<string> contri;\n        vector<vector<string>> res;\n        \n        f(s, 0, contri, res);\n        \n        return res;\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"palindrome-partitioning"}