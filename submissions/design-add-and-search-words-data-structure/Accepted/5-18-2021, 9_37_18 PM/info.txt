{"id":494939179,"lang":"cpp","time":"3Â weeks","timestamp":1621354038,"status_display":"Accepted","runtime":"64 ms","url":"/submissions/detail/494939179/","is_pending":"Not Pending","title":"Design Add and Search Words Data Structure","memory":"43.5 MB","code":"class WordDictionary {\npublic:\n    /** Initialize your data structure here. */\n    struct trieNode{\n        trieNode* next[26] = {NULL};\n        bool isEndHere = false;\n    };\n    trieNode* root;\n    \n    WordDictionary() {\n       root = new trieNode();\n    }\n    \n    void addWord(string word) {\n        trieNode* temp = root;\n        for(char c: word){\n            if(temp->next[c-'a']==NULL) temp->next[c-'a']=new trieNode();\n            temp=temp->next[c-'a'];\n        }\n        temp->isEndHere = true;\n    }\n    \n    bool wildCardSearch(string suffix, trieNode* curr){\n        for(int i=0;i<suffix.size();i++){\n            char c = suffix[i];\n            if(c!='.'){\n                if(curr->next[c-'a']==NULL) return false;\n                curr=curr->next[c-'a'];\n            } else{\n                bool found = false;\n                int j;\n                for(j=0;j<26;j++){\n                    if(curr->next[j]!=NULL) found = wildCardSearch(suffix.substr(i+1),curr->next[j]);\n                    if(found) return true;\n                }\n                if(j==26) return false;\n            }\n        }\n        return curr->isEndHere;\n    }\n    \n    bool search(string word) {\n        return wildCardSearch(word,root);\n    }\n};\n\n/**\n * Your WordDictionary object will be instantiated and called as such:\n * WordDictionary* obj = new WordDictionary();\n * obj->addWord(word);\n * bool param_2 = obj->search(word);\n */","compare_result":"1111111111111","title_slug":"design-add-and-search-words-data-structure"}