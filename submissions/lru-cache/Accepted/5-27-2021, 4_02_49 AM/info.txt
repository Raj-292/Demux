{"id":498732989,"lang":"cpp","time":"1 week, 6 days","timestamp":1622068369,"status_display":"Accepted","runtime":"92 ms","url":"/submissions/detail/498732989/","is_pending":"Not Pending","title":"LRU Cache","memory":"42.2 MB","code":"class LRUCache {\npublic:\n    //list has iterator to key values\n    list<int>l;\n    int c;\n    unordered_map<int,pair<int,list<int>::iterator>>m;\n    \n    LRUCache(int capacity) {\n       c=capacity;\n        \n    }\n    \n    int get(int key) {\n      if(m.find(key)==m.end()) \n      {\n          return -1;\n      }\n    //value to be returned\n        int res=m[key].first;\n        l.erase(m[key].second);\n        l.push_front(key);\n         m[key].second = l.begin();\n        return res;\n        \n    }\n    \n    void put(int key, int value) {\n        if(m.find(key)!=m.end())\n        {\n            l.erase(m[key].second);\n            l.push_front(key);\n            m[key].second=l.begin();\n            m[key].first=value;   \n        }\n        else\n        {\n            if(l.size()<c)\n            {\n                 l.push_front(key);\n                 m[key] = make_pair(value, l.begin());    \n            }\n            else\n            {\n                int k=l.back();\n                l.pop_back();\n                m.erase(k);\n                l.push_front(key);\n               m[key]=make_pair(value,l.begin());\n            }\n        }\n    }\n};\n\n/**\n * Your LRUCache object will be instantiated and called as such:\n * LRUCache* obj = new LRUCache(capacity);\n * int param_1 = obj->get(key);\n * obj->put(key,value);\n */","compare_result":"11111111111111111111","title_slug":"lru-cache"}