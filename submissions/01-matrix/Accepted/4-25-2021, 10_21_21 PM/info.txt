{"id":485076967,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1619369481,"status_display":"Accepted","runtime":"284 ms","url":"/submissions/detail/485076967/","is_pending":"Not Pending","title":"01 Matrix","memory":"87.6 MB","code":"class Solution {\npublic:\n    vector<vector<int>> offset = {{0, 1}, {1, 0}, {-1, 0}, {0, -1}};\n    \n    vector<vector<int>> updateMatrix(vector<vector<int>>& mat) {\n        // q[0] = row idx.\n        // q[1] = col idx.\n        // q[2] = distance.\n        int m = mat.size(), n = mat[0].size();\n        queue<vector<int>> q;\n        vector<vector<int>> res(m, vector<int>(n, -1));\n        \n        // Initialize the q and visited array (res).\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (mat[i][j] == 0) {\n                    q.push({i, j, 0});\n                }\n            }\n        }\n        \n        // Level-order traversal.\n        while(!q.empty()) {\n            vector<int> curr = q.front();\n            q.pop();\n            \n            if (res[curr[0]][curr[1]] != -1)\n                continue;\n            \n            res[curr[0]][curr[1]] = curr[2];\n            \n            // Go through the nbrs.\n            for (auto& entry : offset) {\n                int x = curr[0] + entry[0];\n                int y = curr[1] + entry[1];\n                \n                if (x < 0 || y < 0 || x >= m || y >= n)\n                    continue;\n                \n                if (res[x][y] == -1) {\n                    q.push({x, y, curr[2] + 1});\n                }\n            }\n        }\n        \n        return res;\n    }\n};","compare_result":"111111111111111111111111111111111111111111111111","title_slug":"01-matrix"}