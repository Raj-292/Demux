{"id":484650194,"lang":"cpp","time":"1 month, 2 weeks","timestamp":1619283583,"status_display":"Accepted","runtime":"20 ms","url":"/submissions/detail/484650194/","is_pending":"Not Pending","title":"Course Schedule II","memory":"13.4 MB","code":"class Solution {\npublic:\n    vector<int> findOrder(int numCourses, vector<vector<int>>& prerequisites) {\n        // Populate the graph and the indegree vector.\n        vector<vector<int>> graph(numCourses);\n        vector<int> in(numCourses, 0);\n        vector<int> curr_set;\n        int idx = 0;\n        vector<int> res;\n        \n        \n        for(auto& pre: prerequisites) {\n            // Edge from 1 to 0.\n            graph[pre[1]].push_back(pre[0]);\n            in[pre[0]]++;\n        }\n        \n        // Initialize the initial list to traverse.\n        for(int i = 0; i < numCourses; i++) {\n            if (in[i] == 0)\n                curr_set.push_back(i);\n        }\n        \n        // Traverse this list;\n        while(idx < curr_set.size()) {\n            int curr_node = curr_set[idx];\n            res.push_back(curr_node);\n            // Decrease the indegree by 1 for all the nbrs of idx\n            for (auto& nbr: graph[curr_node]) {\n                in[nbr]--;\n                if (in[nbr] == 0)\n                    curr_set.push_back(nbr);\n            }\n            idx++;\n        }\n        \n        return (int)res.size() == numCourses? res: vector<int>();\n    }\n};","compare_result":"11111111111111111111111111111111111111111111","title_slug":"course-schedule-ii"}