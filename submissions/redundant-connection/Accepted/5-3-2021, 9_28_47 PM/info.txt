{"id":488356420,"lang":"cpp","time":"1Â month","timestamp":1620057527,"status_display":"Accepted","runtime":"8 ms","url":"/submissions/detail/488356420/","is_pending":"Not Pending","title":"Redundant Connection","memory":"8.8 MB","code":"class Solution {\npublic:\n    int findRoot(vector<int>& parent, int x) {\n        int curr_node = x;\n        \n        while(parent[curr_node] != curr_node) {\n            curr_node = parent[curr_node];\n        }\n        \n        return curr_node;\n    }\n    \n    vector<int> findRedundantConnection(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> parent(n+1, -1);\n        \n        // Start with an empty set of trees.\n        for (int i = 1; i <= n; i++)\n            parent[i] = i;\n        \n        // Add edges one by one.\n        for (int i = 0; i < edges.size(); i++) {\n            int x = edges[i][0];\n            int y = edges[i][1];\n            \n            int root_x = findRoot(parent, x);\n            int root_y = findRoot(parent, y);\n            \n            if (root_x == root_y)\n                return edges[i];\n            \n            parent[root_y] = root_x;\n        }\n        \n        // NF.\n        return {-1, -1};\n    }\n};","compare_result":"111111111111111111111111111111111111111","title_slug":"redundant-connection"}