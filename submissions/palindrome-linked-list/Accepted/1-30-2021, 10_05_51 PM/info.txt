{"id":449747469,"lang":"cpp","time":"4Â months, 1Â week","timestamp":1612024551,"status_display":"Accepted","runtime":"28 ms","url":"/submissions/detail/449747469/","is_pending":"Not Pending","title":"Palindrome Linked List","memory":"13.9 MB","code":"/**\n * Definition for singly-linked list.\n * struct ListNode {\n *     int val;\n *     ListNode *next;\n *     ListNode() : val(0), next(nullptr) {}\n *     ListNode(int x) : val(x), next(nullptr) {}\n *     ListNode(int x, ListNode *next) : val(x), next(next) {}\n * };\n */\nclass Solution {\npublic:\n    bool isPalindrome(ListNode* head) {\n        // Find the middle\n        ListNode *slow = head, *fast = head, *first_half = head;\n        \n        while(fast && fast->next) {\n            slow = slow->next;\n            fast = fast->next->next;\n        }\n            \n        // Reverse the second half\n        ListNode *second_half = NULL, *temp;\n        \n        while(slow) {\n            temp = slow->next;\n            slow->next = second_half;\n            second_half = slow;\n            slow = temp;\n        }\n            \n        // Compare the first half and the second half\n        while(second_half && first_half->val == second_half->val) {\n            first_half = first_half->next;\n            second_half = second_half->next;\n        }\n        \n        if(second_half)\n            return false;\n        \n        return true;\n    }\n};","compare_result":"11111111111111111111111111","title_slug":"palindrome-linked-list"}