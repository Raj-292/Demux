{"id":436046194,"lang":"cpp","time":"5 months, 1 week","timestamp":1609262851,"status_display":"Accepted","runtime":"16 ms","url":"/submissions/detail/436046194/","is_pending":"Not Pending","title":"Single Number III","memory":"10.4 MB","code":"class Solution {\npublic:\n    vector<int> singleNumber(vector<int>& nums) {\n        // Compute b^f\n        long long int bxorf = 0;\n        \n        for(int i = 0; i < nums.size(); i++)\n            bxorf ^= nums[i];\n        \n        // Compute the mask\n        long long int mask = (bxorf)&(~(bxorf-1));\n        \n        // Divide it into two groups\n        long long int xorg1 = 0, xorg2 = 0;\n        \n        for(int i = 0; i < nums.size(); i++) {\n            // Test whether nums[i] has 1 at the position\n            // specified by the mask\n            // Group 1\n            if((nums[i]&mask) == 0)\n                xorg1 ^= nums[i];\n            // Group 2\n            else\n                xorg2 ^= nums[i];\n        }\n        \n        return {(int)xorg1, (int)xorg2};\n    }\n};","compare_result":"11111111111111111111111111111111","title_slug":"single-number-iii"}